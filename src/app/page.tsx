'use client';

import React, { useRef, useEffect, useState } from 'react';

const GlobePrototype = () => {
  const globeEl = useRef<HTMLDivElement>(null);
  const globeRef = useRef<any>(null);
  const [selectedCountry, setSelectedCountry] = useState<string | null>(null);
  const [currentGlobeIndex, setCurrentGlobeIndex] = useState(0);
  const [zoomLevel, setZoomLevel] = useState(2.5);
  const [clusteredData, setClusteredData] = useState<any[]>([]);
  const [globeLoading, setGlobeLoading] = useState(false);
  const [globeError, setGlobeError] = useState<string | null>(null);

  // Ïó¨Ìñâ Ìå®ÌÑ¥Îì§
  const travelPatterns = [
    {
      title: 'ÏïÑÏãúÏïÑ Î¨∏Ìôî Ïó¨Ìñâ',
      subtitle: 'Ï†ÑÌÜµÍ≥º ÌòÑÎåÄÍ∞Ä Í≥µÏ°¥ÌïòÎäî ÏïÑÏãúÏïÑÏùò Îß§Î†•',
      countries: [
        {
          id: 'JPN',
          name: 'ÎèÑÏøÑ, ÏùºÎ≥∏',
          flag: 'üáØüáµ',
          lat: 35.6762,
          lng: 139.6503,
          color: '#e91e63',
        },
        {
          id: 'JPN2',
          name: 'Ïò§ÏÇ¨Ïπ¥, ÏùºÎ≥∏',
          flag: 'üáØüáµ',
          lat: 34.6937,
          lng: 135.5023,
          color: '#e91e63',
        },
        {
          id: 'JPN3',
          name: 'ÍµêÌÜ†, ÏùºÎ≥∏',
          flag: 'üáØüáµ',
          lat: 35.0116,
          lng: 135.7681,
          color: '#e91e63',
        },
        {
          id: 'KOR',
          name: 'ÏÑúÏö∏, ÌïúÍµ≠',
          flag: 'üá∞üá∑',
          lat: 37.5665,
          lng: 126.978,
          color: '#9c27b0',
        },
        {
          id: 'TWN',
          name: 'ÌÉÄÏù¥Î≤†Ïù¥, ÎåÄÎßå',
          flag: 'üáπüáº',
          lat: 25.033,
          lng: 121.5654,
          color: '#673ab7',
        },
        {
          id: 'THA',
          name: 'Î∞©ÏΩï, ÌÉúÍµ≠',
          flag: 'üáπüá≠',
          lat: 13.7563,
          lng: 100.5018,
          color: '#3f51b5',
        },
        {
          id: 'SGP',
          name: 'Ïã±Í∞ÄÌè¨Î•¥',
          flag: 'üá∏üá¨',
          lat: 1.3521,
          lng: 103.8198,
          color: '#2196f3',
        },
      ],
    },
    {
      title: 'ÏÑ∏Í≥Ñ Î™ÖÏÜå ÏàúÎ°Ä',
      subtitle: 'ÍøàÏóê Í∑∏Î¶¨Îçò ÏÑ∏Í≥Ñ Í∞ÅÍµ≠Ïùò ÎûúÎìúÎßàÌÅ¨Îì§',
      countries: [
        {
          id: 'USA',
          name: 'Îâ¥Ïöï, ÎØ∏Íµ≠',
          flag: 'üá∫üá∏',
          lat: 40.7128,
          lng: -74.006,
          color: '#f44336',
        },
        {
          id: 'FRA',
          name: 'ÌååÎ¶¨, ÌîÑÎûëÏä§',
          flag: 'üá´üá∑',
          lat: 48.8566,
          lng: 2.3522,
          color: '#e91e63',
        },
        {
          id: 'EGY',
          name: 'Ïπ¥Ïù¥Î°ú, Ïù¥ÏßëÌä∏',
          flag: 'üá™üá¨',
          lat: 30.0444,
          lng: 31.2357,
          color: '#9c27b0',
        },
        {
          id: 'BRA',
          name: 'Î¶¨Ïö∞Îç∞ÏûêÎÑ§Ïù¥Î£®, Î∏åÎùºÏßà',
          flag: 'üáßüá∑',
          lat: -22.9068,
          lng: -43.1729,
          color: '#4caf50',
        },
        {
          id: 'AUS',
          name: 'ÏãúÎìúÎãà, Ìò∏Ï£º',
          flag: 'üá¶üá∫',
          lat: -33.8688,
          lng: 151.2093,
          color: '#00bcd4',
        },
      ],
    },
    {
      title: 'Ïú†ÎüΩ Î°úÎß®Ìã± Ïó¨Ìñâ',
      subtitle: 'ÎÇ≠ÎßåÏ†ÅÏù∏ Ïú†ÎüΩÏùò Í≥†ÏÑ±Í≥º Í±∞Î¶¨Îì§',
      countries: [
        {
          id: 'ITA',
          name: 'Î°úÎßà, Ïù¥ÌÉàÎ¶¨ÏïÑ',
          flag: 'üáÆüáπ',
          lat: 41.9028,
          lng: 12.4964,
          color: '#ff9800',
        },
        {
          id: 'ESP',
          name: 'Î∞îÎ•¥ÏÖÄÎ°úÎÇò, Ïä§ÌéòÏù∏',
          flag: 'üá™üá∏',
          lat: 41.3851,
          lng: 2.1734,
          color: '#4caf50',
        },
        {
          id: 'GBR',
          name: 'Îü∞Îçò, ÏòÅÍµ≠',
          flag: 'üá¨üáß',
          lat: 51.5074,
          lng: -0.1278,
          color: '#2196f3',
        },
        {
          id: 'DEU',
          name: 'Î≤†Î•ºÎ¶∞, ÎèÖÏùº',
          flag: 'üá©üá™',
          lat: 52.52,
          lng: 13.405,
          color: '#ff5722',
        },
        {
          id: 'CHE',
          name: 'Ï∑®Î¶¨Ìûà, Ïä§ÏúÑÏä§',
          flag: 'üá®üá≠',
          lat: 47.3769,
          lng: 8.5417,
          color: '#795548',
        },
      ],
    },
  ];

  const currentPattern = travelPatterns[currentGlobeIndex];

  // ISO ÏΩîÎìú Îß§Ìïë Ìï®Ïàò
  const getISOCode = (countryId: string): string => {
    const isoMap: { [key: string]: string } = {
      JPN: 'JPN',
      JPN2: 'JPN',
      JPN3: 'JPN',
      KOR: 'KOR',
      TWN: 'TWN',
      THA: 'THA',
      SGP: 'SGP',
      USA: 'USA',
      FRA: 'FRA',
      EGY: 'EGY',
      BRA: 'BRA',
      AUS: 'AUS',
      ITA: 'ITA',
      ESP: 'ESP',
      GBR: 'GBR',
      DEU: 'DEU',
      CHE: 'CHE',
    };
    return isoMap[countryId] || countryId;
  };

  // Í±∞Î¶¨ Í∏∞Î∞ò ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ Ìï®Ïàò
  const clusterLocations = (locations: any[], distance: number) => {
    const clusters: any[] = [];
    const processed = new Set();

    locations.forEach((location, index) => {
      if (processed.has(index)) return;

      const cluster = {
        id: location.id,
        name: location.name,
        flag: location.flag,
        lat: location.lat,
        lng: location.lng,
        color: location.color,
        items: [location],
        count: 1,
      };

      // Ï£ºÎ≥ÄÏùò Í∞ÄÍπåÏö¥ ÏúÑÏπòÎì§ÏùÑ ÌÅ¥Îü¨Ïä§ÌÑ∞Ïóê Ï∂îÍ∞Ä
      locations.forEach((otherLocation, otherIndex) => {
        if (otherIndex === index || processed.has(otherIndex)) return;

        const dist = Math.sqrt(
          Math.pow(location.lat - otherLocation.lat, 2) +
            Math.pow(location.lng - otherLocation.lng, 2)
        );

        if (dist < distance) {
          cluster.items.push(otherLocation);
          cluster.count++;
          processed.add(otherIndex);

          // ÌÅ¥Îü¨Ïä§ÌÑ∞ Ï§ëÏã¨Ï†ê Ïû¨Í≥ÑÏÇ∞
          const totalLat = cluster.items.reduce(
            (sum, item) => sum + item.lat,
            0
          );
          const totalLng = cluster.items.reduce(
            (sum, item) => sum + item.lng,
            0
          );
          cluster.lat = totalLat / cluster.items.length;
          cluster.lng = totalLng / cluster.items.length;
        }
      });

      processed.add(index);
      clusters.push(cluster);
    });

    return clusters;
  };

  // Ï§å Î†àÎ≤®Ïóê Îî∞Î•∏ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ Í±∞Î¶¨ Í≥ÑÏÇ∞
  const getClusterDistance = (zoom: number) => {
    // zoomÏù¥ ÌÅ¥ÏàòÎ°ù Î©ÄÎ¶¨ÏÑú Î≥¥Îäî Í≤É (altitudeÍ∞Ä ÎÜíÏùå)
    // zoomÏù¥ ÏûëÏùÑÏàòÎ°ù Í∞ÄÍπåÏù¥ÏÑú Î≥¥Îäî Í≤É (altitudeÍ∞Ä ÎÇÆÏùå)

    if (zoom > 6) return 50; // Îß§Ïö∞ Î©ÄÎ¶¨ - ÏµúÍ∞ï ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ (Ïú†ÎüΩ Ï†ÑÏ≤¥ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ)
    if (zoom > 5) return 40; // Î©ÄÎ¶¨ - Í∞ïÌïú ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ (ÎåÄÎ•ôÎ≥Ñ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ)
    if (zoom > 4) return 30; // Ï§ëÍ∞Ñ Í±∞Î¶¨ - Ï§ëÍ∞Ñ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ (ÏßÄÏó≠Î≥Ñ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ)
    if (zoom > 3) return 20; // Í∞ÄÍπåÏù¥ - ÏïΩÌïú ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ (Ïù∏Í∑º Íµ≠Í∞ÄÎ≥Ñ)
    if (zoom > 2) return 15; // Îçî Í∞ÄÍπåÏù¥ - Îß§Ïö∞ ÏïΩÌïú ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ
    if (zoom > 1.5) return 10; // Îß§Ïö∞ Í∞ÄÍπåÏù¥ - ÏµúÏÜå ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ
    return 0; // Í∑πÎèÑÎ°ú Í∞ÄÍπåÏù¥ - ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ Ìï¥Ï†ú
  };

  // Î∏åÎùºÏö∞Ï†Ä Í∏∞Î≥∏ ÌôïÎåÄ/Ï∂ïÏÜå Î∞©ÏßÄ Î∞è Globe Ï§å Í∞êÏßÄ
  useEffect(() => {
    const preventZoom = (e: WheelEvent) => {
      if (e.ctrlKey) {
        e.preventDefault();
      }
    };

    const preventKeyboardZoom = (e: KeyboardEvent) => {
      if (
        e.ctrlKey &&
        (e.key === '+' || e.key === '-' || e.key === '=' || e.key === '0')
      ) {
        e.preventDefault();
      }
    };

    const preventTouchZoom = (e: TouchEvent) => {
      if (e.touches.length > 1) {
        e.preventDefault();
      }
    };

    // Globe Ïª®ÌÖåÏù¥ÎÑàÏóêÏÑú Ìú† Ïù¥Î≤§Ìä∏ Í∞êÏßÄ
    const handleGlobeWheel = (e: WheelEvent) => {
      // Ìú† Ïù¥Î≤§Ìä∏ Î∞úÏÉù Ïãú Ïû†Ïãú ÌõÑ Ï§å Î†àÎ≤® Ï≤¥ÌÅ¨
      setTimeout(() => {
        if (globeRef.current) {
          try {
            const camera = globeRef.current.camera();
            const controls = globeRef.current.controls();
            if (camera && controls) {
              const distance = controls.getDistance
                ? controls.getDistance()
                : camera.position.length();
              const globeRadius = globeRef.current.getGlobeRadius();
              const altitude = distance / globeRadius - 1;

              setZoomLevel(altitude);
            }
          } catch (error) {
            // ÏóêÎü¨ Î¨¥Ïãú
          }
        }
      }, 50);
    };

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    document.addEventListener('wheel', preventZoom, { passive: false });
    document.addEventListener('keydown', preventKeyboardZoom);
    document.addEventListener('touchstart', preventTouchZoom, {
      passive: false,
    });

    // Globe Ïª®ÌÖåÏù¥ÎÑàÏóê Ìú† Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    if (globeEl.current) {
      globeEl.current.addEventListener('wheel', handleGlobeWheel, {
        passive: true,
      });
    }

    return () => {
      // ÌÅ¥Î¶∞ÏóÖ
      document.removeEventListener('wheel', preventZoom);
      document.removeEventListener('keydown', preventKeyboardZoom);
      document.removeEventListener('touchstart', preventTouchZoom);

      if (globeEl.current) {
        globeEl.current.removeEventListener('wheel', handleGlobeWheel);
      }
    };
  }, []);

  // Ïπ¥Î©îÎùº Ï§å Î†àÎ≤®ÏùÑ Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú Ï≤¥ÌÅ¨ (onZoom Ïù¥Î≤§Ìä∏ ÎåÄÏã† ÏÇ¨Ïö©)
  useEffect(() => {
    if (!globeRef.current) return;

    const checkZoomLevel = () => {
      if (globeRef.current && globeRef.current.camera) {
        try {
          const camera = globeRef.current.camera();
          const controls = globeRef.current.controls();

          if (camera && camera.position && controls) {
            // Ïπ¥Î©îÎùº Í±∞Î¶¨ ÏßÅÏ†ë Í≥ÑÏÇ∞
            const distance = camera.position.distanceTo({ x: 0, y: 0, z: 0 });
            const globeRadius = globeRef.current.getGlobeRadius();
            const altitude = distance / globeRadius - 1;

            // Ïª®Ìä∏Î°§Îü¨Ïùò Í±∞Î¶¨ÎèÑ ÌôïÏù∏
            const controlDistance = controls.getDistance
              ? controls.getDistance()
              : distance;
            const controlAltitude = controlDistance / globeRadius - 1;

            // Îçî Ï†ïÌôïÌïú Í∞í ÏÇ¨Ïö©
            const finalAltitude = Math.max(altitude, controlAltitude);

            setZoomLevel(finalAltitude);
          }
        } catch (error) {
          // ÏóêÎü¨ Î¨¥Ïãú
        }
      }
    };

    // Îçî ÏûêÏ£º Ï≤¥ÌÅ¨ÌïòÏó¨ Ïã§ÏãúÍ∞Ñ Î∞òÏùëÏÑ± Ìñ•ÏÉÅ
    const interval = setInterval(checkZoomLevel, 100);

    return () => clearInterval(interval);
  }, []); // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥ÏùÑ ÎπÑÏõåÏÑú Î¨¥Ìïú Î£®ÌîÑ Î∞©ÏßÄ

  useEffect(() => {
    console.log('üåç Globe Î°úÎî© ÏãúÏûë...');
    // Globe.gl ÎèôÏ†Å Î°úÎî©
    const loadGlobe = async () => {
      try {
        setGlobeLoading(true);
        setGlobeError(null);

        if (!globeEl.current) {
          console.error('Globe container not found');
          setGlobeError('Globe container not found');
          return;
        }

        console.log('Globe.gl ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎî© Ï§ë...');
        const Globe = (await import('globe.gl')).default;

        if (!Globe) {
          console.error('Failed to load Globe.gl library');
          setGlobeError('Failed to load Globe.gl library');
          return;
        }

        console.log('Globe.gl ÎùºÏù¥Î∏åÎü¨Î¶¨ Î°úÎî© ÏôÑÎ£å');

        // Í∏∞Ï°¥ ÎÇ¥Ïö© Ï†úÍ±∞
        globeEl.current.innerHTML = '';

        console.log('Globe Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Ï§ë...');
        const globe = new Globe(globeEl.current)
          // Blue Marble Í≥†Ìï¥ÏÉÅÎèÑ ÏßÄÍµ¨Î≥∏ Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö©
          .globeImageUrl(
            '//unpkg.com/three-globe/example/img/earth-blue-marble.jpg'
          )
          .bumpImageUrl(
            '//unpkg.com/three-globe/example/img/earth-topology.png'
          )
          .backgroundImageUrl(
            '//unpkg.com/three-globe/example/img/night-sky.png'
          )
          .width(500)
          .height(500)
          .showGlobe(true)
          .showAtmosphere(true)
          .atmosphereColor('#4a90e2')
          .atmosphereAltitude(0.15);

        // globe Ï∞∏Ï°∞ Ï†ÄÏû•
        globeRef.current = globe;
        console.log('Globe initialized successfully');

        // Ïπ¥Î©îÎùº Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞ (Ï£ºÍ∏∞Ï†Å Ï≤¥ÌÅ¨Î°ú ÎåÄÏ≤¥)

        // Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìú (GeoJSON Î≤ÑÏ†Ñ ÏÇ¨Ïö©)
        console.log('üåê Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞ fetch ÏãúÏûë...');
        fetch(
          'https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson'
        )
          .then((res) => {
            console.log('üì° fetch ÏùëÎãµ ÏÉÅÌÉú:', res.status, res.ok);
            if (!res.ok) {
              throw new Error(`HTTP error! status: ${res.status}`);
            }
            return res.json();
          })
          .then((countriesData) => {
            console.log('üó∫Ô∏è Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞ ÏõêÎ≥∏:', countriesData);
            console.log('üó∫Ô∏è Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ:', typeof countriesData);
            console.log('üó∫Ô∏è features Ï°¥Ïû¨:', !!countriesData?.features);
            console.log(
              'üó∫Ô∏è Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®:',
              countriesData?.features?.length
            );

            // GeoJSON Îç∞Ïù¥ÌÑ∞ÏóêÏÑú features Ï∂îÏ∂ú
            const features = countriesData?.features || [];
            console.log('üåç Ï≤òÎ¶¨Îêú features:', features.length);

            // Ï≤´ Î≤àÏß∏ feature ÏÉòÌîå ÌôïÏù∏
            if (features.length > 0) {
              console.log('ÔøΩ Ï≤´ Î≤àÏß∏ Íµ≠Í∞Ä ÏÉòÌîå:', features[0]);
              console.log('üìù properties:', features[0].properties);
            }

            // ÌòÑÏû¨ Ìå®ÌÑ¥Ïùò Î∞©Î¨∏Ìïú Íµ≠Í∞ÄÎì§Ïùò ISO ÏΩîÎìú Í≥ÑÏÇ∞
            const currentVisitedISOCodes = [
              ...new Set(currentPattern.countries.map((c) => getISOCode(c.id))),
            ];
            console.log('üìç Î∞©Î¨∏Ìïú Íµ≠Í∞Ä ISO ÏΩîÎìú:', currentVisitedISOCodes);

            // countriesDataÍ∞Ä undefinedÏù¥Í±∞ÎÇò featuresÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ ÏúÑÏóêÏÑú Ï≤òÎ¶¨Îêú features ÏÇ¨Ïö©
            console.log('üåç Ï†ÑÏ≤¥ Íµ≠Í∞Ä features:', features.length);

            // Î™®Îì† Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìú (ÌïÑÌÑ∞ÎßÅ Ï†úÍ±∞)
            globe
              .polygonsData(features)
              .polygonCapColor((feat: any) => {
                // properties Íµ¨Ï°∞ ÌôïÏù∏Ïö© Î°úÍ∑∏ (Ï≤òÏùå 5Í∞úÎßå)
                if (Math.random() < 0.01) {
                  // 1% ÌôïÎ•†Î°úÎßå Î°úÍ∑∏ Ï∂úÎ†•
                  console.log('üîç Ìè¥Î¶¨Í≥§ properties:', feat.properties);
                  console.log('üîç Í∞ÄÎä•Ìïú ISO ÌïÑÎìúÎì§:', {
                    ISO_A3: feat.properties?.ISO_A3,
                    iso_a3: feat.properties?.iso_a3,
                    ISO3: feat.properties?.ISO3,
                    iso3: feat.properties?.iso3,
                    ADM0_A3: feat.properties?.ADM0_A3,
                    name: feat.properties?.name || feat.properties?.NAME,
                  });
                }

                // FeatureÏùò id ÌïÑÎìúÏóêÏÑú ISO ÏΩîÎìú Í∞ÄÏ†∏Ïò§Í∏∞ (GeoJSON ÌëúÏ§Ä)
                const isoCode = feat.id; // propertiesÍ∞Ä ÏïÑÎãàÎùº ÏµúÏÉÅÏúÑ id ÌïÑÎìú ÏÇ¨Ïö©

                console.log(
                  `üó∫Ô∏è Íµ≠Í∞Ä ${
                    feat.properties?.name || 'Unknown'
                  }: ISO=${isoCode}`
                );

                const countryData = currentPattern.countries.find(
                  (c: any) => getISOCode(c.id) === isoCode
                );

                // Î∞©Î¨∏ÌïòÏßÄ ÏïäÏùÄ Íµ≠Í∞ÄÎäî Îß§Ïö∞ Ìà¨Î™ÖÌïòÍ≤å
                if (!countryData) return 'rgba(100, 100, 100, 0.02)';

                console.log(
                  `‚úÖ Îß§Ïπ≠Îêú Íµ≠Í∞Ä: ${countryData.name}, ÏÉâÏÉÅ: ${countryData.color}`
                );

                // ÏÑ†ÌÉùÎêú Íµ≠Í∞ÄÏù∏ÏßÄ ÌôïÏù∏
                const isSelected =
                  selectedCountry &&
                  currentPattern.countries.find(
                    (c) =>
                      c.id === selectedCountry && getISOCode(c.id) === isoCode
                  );

                if (isSelected) {
                  return countryData.color;
                }

                // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î∞©Î¨∏Ìïú Íµ≠Í∞ÄÎäî ÏÇ¥Ïßù ÌëúÏãú
                return `${countryData.color}44`;
              })
              .polygonSideColor(() => 'rgba(0, 100, 0, 0.15)')
              .polygonStrokeColor(() => 'rgba(255, 255, 255, 0.5)') // Î∞ùÏùÄ Ìù∞ÏÉâ Íµ≠Í≤ΩÏÑ†
              .polygonAltitude(0.01)
              .polygonLabel((feat: any) => {
                const isoCode = feat.properties.ISO_A3;
                const countryData = currentPattern.countries.find(
                  (c: any) => getISOCode(c.id) === isoCode
                );
                return countryData ? countryData.name : '';
              });

            console.log('üåç Ìè¥Î¶¨Í≥§ ÏÑ§Ï†ï ÏôÑÎ£å');

            // Ìè¥Î¶¨Í≥§ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
            globe.onPolygonClick((polygon: any) => {
              const countryISOCode = polygon.properties.ISO_A3;

              // ÌÅ¥Î¶≠Îêú ISO ÏΩîÎìúÏóê Ìï¥ÎãπÌïòÎäî Ï≤´ Î≤àÏß∏ ÎèÑÏãú Ï∞æÍ∏∞
              const clickedCountry = currentPattern.countries.find(
                (c: any) => getISOCode(c.id) === countryISOCode
              );

              if (clickedCountry) {
                setSelectedCountry(clickedCountry.id);
                globe.pointOfView(
                  {
                    lat: clickedCountry.lat,
                    lng: clickedCountry.lng,
                    altitude: 1.5,
                  },
                  1000
                );
              }
            });
          })
          .catch((error) => {
            console.error('‚ùå Íµ≠Í∞Ä Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
            console.error('‚ùå ÏóêÎü¨ ÏÉÅÏÑ∏:', error.message);
            console.error('‚ùå ÏóêÎü¨ Ïä§ÌÉù:', error.stack);
            console.log('üîÑ ÎåÄÏ≤¥ Î∞©Î≤ïÏúºÎ°ú ÏãúÎèÑ...');

            // fetch Ïã§Ìå® Ïãú Îπà Ìè¥Î¶¨Í≥§ÏúºÎ°ú ÏÑ§Ï†ï
            globe.polygonsData([]);
            console.log('üìä Îπà Ìè¥Î¶¨Í≥§ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï ÏôÑÎ£å');
          });

        // ÏûêÎèô ÌöåÏ†Ñ
        globe.controls().autoRotate = true;
        globe.controls().autoRotateSpeed = 0.5;
        globe.controls().enableZoom = true;
        globe.controls().minDistance = 101; // ÏµúÏÜå Í±∞Î¶¨ ÏÑ§Ï†ï
        globe.controls().maxDistance = 1000; // ÏµúÎåÄ Í±∞Î¶¨ ÏÑ§Ï†ï

        // Ï§å Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
        const controls = globe.controls();
        if (controls) {
          const onZoomChange = () => {
            if (globeRef.current) {
              try {
                const camera = globeRef.current.camera();
                const distance = controls.getDistance
                  ? controls.getDistance()
                  : camera.position.length();
                const globeRadius = globeRef.current.getGlobeRadius();
                const altitude = distance / globeRadius - 1;

                setZoomLevel(altitude);
              } catch (error) {
                // ÏóêÎü¨ Î¨¥Ïãú
              }
            }
          };

          // Îã§ÏñëÌïú Ïù¥Î≤§Ìä∏Ïóê Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
          controls.addEventListener('change', onZoomChange);
          controls.addEventListener('start', onZoomChange);
          controls.addEventListener('end', onZoomChange);
        }

        // Î†åÎçîÎü¨ ÌíàÏßà Í∞úÏÑ†
        const renderer = globe.renderer();
        if (renderer) {
          renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
          renderer.shadowMap.enabled = true;
          renderer.shadowMap.type = 2; // PCFSoftShadowMap
        }

        // ÏßÄÍµ¨Î≥∏ Í∞ùÏ≤¥Ïóê Ï†ëÍ∑ºÌïòÏó¨ ÌÖçÏä§Ï≤ò ÌïÑÌÑ∞ÎßÅ Í∞úÏÑ†
        setTimeout(() => {
          const scene = globe.scene();
          if (scene) {
            scene.traverse((child: any) => {
              if (child.material && child.material.map) {
                child.material.map.generateMipmaps = true;
                child.material.map.minFilter = 1008; // LinearMipmapLinearFilter
                child.material.map.magFilter = 1006; // LinearFilter
                child.material.map.anisotropy =
                  renderer?.capabilities?.getMaxAnisotropy() || 4;
              }
            });
          }
        }, 1000);

        // Ï¥àÍ∏∞ Ïπ¥Î©îÎùº ÏúÑÏπò
        globe.pointOfView({ altitude: 2.5 });

        setGlobeLoading(false);
        console.log('Globe setup completed successfully');
      } catch (error) {
        console.error('Globe.gl Î°úÎî© Ïã§Ìå®:', error);
        const errorMessage =
          error instanceof Error ? error.message : String(error);
        setGlobeError(`Globe.gl Î°úÎî© Ïã§Ìå®: ${errorMessage}`);
        setGlobeLoading(false);
        // Ìè¥Î∞± UI ÌëúÏãú
        if (globeEl.current) {
          globeEl.current.innerHTML = `
            <div style="
              width: 500px; 
              height: 500px; 
              background: radial-gradient(circle at 30% 30%, #2c3e50 0%, #1a252f 100%);
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              color: white;
              font-size: 14px;
              text-align: center;
              flex-direction: column;
              gap: 10px;
            ">
              <div>‚ö†Ô∏è Globe.gl Î°úÎî© Ïã§Ìå®</div>
              <div style="font-size: 12px; opacity: 0.8;">Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî</div>
            </div>
          `;
        }
      }
    };

    loadGlobe();
  }, [selectedCountry, currentGlobeIndex]);

  // Ï§å Î†àÎ≤® Î≥ÄÍ≤ΩÏóê Îî∞Î•∏ ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ ÏóÖÎç∞Ïù¥Ìä∏ (Î≥ÑÎèÑ useEffectÎ°ú Î∂ÑÎ¶¨)
  useEffect(() => {
    console.log('üéØ Ï§å Î†àÎ≤® Î≥ÄÍ≤ΩÎê®:', zoomLevel);

    if (!globeRef.current) return;

    // Ï§å Î†àÎ≤®Ïù¥ ÎÑàÎ¨¥ ÎÜíÏúºÎ©¥ (ÎÑàÎ¨¥ Î©ÄÎ¶¨ÏÑú Î≥¥Î©¥) ÎùºÎ≤® Ïà®Í∏∞Í∏∞
    if (zoomLevel > 10) {
      console.log('Ï§å Î†àÎ≤®Ïù¥ ÎÑàÎ¨¥ ÎÜíÏùå. ÎùºÎ≤® Ïà®ÍπÄ');
      globeRef.current.htmlElementsData([]);
      setClusteredData([]);
      return;
    }

    const clusterDistance = getClusterDistance(zoomLevel);
    console.log(`ÌÅ¥Îü¨Ïä§ÌÑ∞ Í±∞Î¶¨: ${clusterDistance}`);

    const clusters = clusterLocations(
      currentPattern.countries,
      clusterDistance
    );

    console.log(`ÏÉùÏÑ±Îêú ÌÅ¥Îü¨Ïä§ÌÑ∞: ${clusters.length}Í∞ú`);

    // ÌÅ¥Îü¨Ïä§ÌÑ∞ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
    setClusteredData(clusters);
    console.log('ÌÅ¥Îü¨Ïä§ÌÑ∞ Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏Îê®:', clusters.length, clusters);
  }, [zoomLevel, currentGlobeIndex]); // currentPattern.countries ÎåÄÏã† currentGlobeIndex ÏÇ¨Ïö©

  // ÌÅ¥Îü¨Ïä§ÌÑ∞ Îç∞Ïù¥ÌÑ∞ Î≥ÄÍ≤Ω Í∞êÏßÄ
  useEffect(() => {
    console.log('üîç clusteredData ÏÉÅÌÉú Î≥ÄÍ≤ΩÎê®:', clusteredData.length);
    clusteredData.forEach((cluster, index) => {
      console.log(
        `ÌÅ¥Îü¨Ïä§ÌÑ∞ ${index}: ${cluster.name} (${cluster.count}Í∞ú ÏïÑÏù¥ÌÖú)`
      );
      if (cluster.items) {
        cluster.items.forEach((item: any) => {
          console.log(`  - ${item.name} (${getISOCode(item.id)})`);
        });
      }
    });

    // Ìè¥Î¶¨Í≥§ ÏÉâÏÉÅ Í∞ïÏ†ú ÏóÖÎç∞Ïù¥Ìä∏
    if (globeRef.current && clusteredData.length > 0) {
      console.log('üé® Ìè¥Î¶¨Í≥§ ÏÉâÏÉÅ Í∞ïÏ†ú ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÏûë...');

      // ÌòÑÏû¨ Ìè¥Î¶¨Í≥§ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
      const currentPolygons = globeRef.current.polygonsData();
      console.log(
        'üìä ÌòÑÏû¨ Ìè¥Î¶¨Í≥§ Îç∞Ïù¥ÌÑ∞:',
        currentPolygons ? currentPolygons.length : 'null'
      );

      if (currentPolygons && currentPolygons.length > 0) {
        console.log('‚úÖ Ìè¥Î¶¨Í≥§ Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨, ÏÉâÏÉÅ Ìï®Ïàò ÏÑ§Ï†ï Ï§ë...');

        // Ìè¥Î¶¨Í≥§ ÏÉâÏÉÅ Ìï®ÏàòÎ•º ÏÉàÎ°ú ÏÑ§Ï†ï
        globeRef.current.polygonCapColor((feat: any) => {
          const isoCode = feat.id; // propertiesÍ∞Ä ÏïÑÎãàÎùº ÏµúÏÉÅÏúÑ id ÌïÑÎìú ÏÇ¨Ïö©
          const countryData = currentPattern.countries.find(
            (c: any) => getISOCode(c.id) === isoCode
          );

          if (!countryData) return 'rgba(100, 100, 100, 0.1)';

          // ÏÑ†ÌÉùÎêú Íµ≠Í∞ÄÏù∏ÏßÄ ÌôïÏù∏
          const isSelected =
            selectedCountry &&
            currentPattern.countries.find(
              (c) => c.id === selectedCountry && getISOCode(c.id) === isoCode
            );

          if (isSelected) {
            console.log(`ÏÑ†ÌÉùÎêú Íµ≠Í∞Ä: ${isoCode}`);
            return countryData.color;
          }

          // ÎùºÎ≤®Ïù¥ ÏûàÎäî Íµ≠Í∞ÄÏù∏ÏßÄ ÌôïÏù∏
          const hasLabel = clusteredData.some(
            (cluster) =>
              cluster.items?.some(
                (item: any) => getISOCode(item.id) === isoCode
              ) || getISOCode(cluster.id) === isoCode
          );

          console.log(
            `Íµ≠Í∞Ä ${isoCode}: hasLabel=${hasLabel}, ÏÉâÏÉÅ=${
              hasLabel ? countryData.color : 'rgba(50,50,50,0.1)'
            }`
          );

          // ÎùºÎ≤®Ïù¥ ÏûàÏúºÎ©¥ ÏôÑÏ†Ñ ÏÉâÏÉÅ, ÏóÜÏúºÎ©¥ Îß§Ïö∞ Ïñ¥Îë°Í≥† Ìà¨Î™ÖÌïòÍ≤å
          return hasLabel ? countryData.color : 'rgba(50,50,50,0.1)';
        });

        console.log('üé® Ìè¥Î¶¨Í≥§ ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
      } else {
        console.log('‚ùå Ìè¥Î¶¨Í≥§ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùå - ÎÇòÏ§ëÏóê Îã§Ïãú ÏãúÎèÑ');

        // Ìè¥Î¶¨Í≥§ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÎã§Î©¥ Ï°∞Í∏à ÌõÑÏóê Îã§Ïãú ÏãúÎèÑ
        setTimeout(() => {
          if (globeRef.current) {
            const retryPolygons = globeRef.current.polygonsData();
            console.log(
              'üîÑ Ïû¨ÏãúÎèÑ - Ìè¥Î¶¨Í≥§ Îç∞Ïù¥ÌÑ∞:',
              retryPolygons ? retryPolygons.length : 'null'
            );

            if (retryPolygons && retryPolygons.length > 0) {
              console.log('üéØ Ïû¨ÏãúÎèÑ ÏÑ±Í≥µ! Ìè¥Î¶¨Í≥§ ÏÉâÏÉÅ Ìï®Ïàò ÏÑ§Ï†ï');
              globeRef.current.polygonCapColor((feat: any) => {
                const isoCode = feat.id; // propertiesÍ∞Ä ÏïÑÎãàÎùº ÏµúÏÉÅÏúÑ id ÌïÑÎìú ÏÇ¨Ïö©
                const countryData = currentPattern.countries.find(
                  (c: any) => getISOCode(c.id) === isoCode
                );

                if (!countryData) return 'rgba(100, 100, 100, 0.1)';

                // ÎùºÎ≤®Ïù¥ ÏûàÎäî Íµ≠Í∞ÄÏù∏ÏßÄ ÌôïÏù∏
                const hasLabel = clusteredData.some(
                  (cluster) =>
                    cluster.items?.some(
                      (item: any) => getISOCode(item.id) === isoCode
                    ) || getISOCode(cluster.id) === isoCode
                );

                console.log(
                  `[Ïû¨ÏãúÎèÑ] Íµ≠Í∞Ä ${isoCode}: hasLabel=${hasLabel}, ÏÉâÏÉÅ=${
                    hasLabel ? countryData.color : 'rgba(50,50,50,0.1)'
                  }`
                );
                return hasLabel ? countryData.color : 'rgba(50,50,50,0.1)';
              });
              console.log('üé® [Ïû¨ÏãúÎèÑ] Ìè¥Î¶¨Í≥§ ÏÉâÏÉÅ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
            }
          }
        }, 1000);
      }
    }
  }, [clusteredData, selectedCountry, currentGlobeIndex]);

  // ÌÅ¥Îü¨Ïä§ÌÑ∞ Îç∞Ïù¥ÌÑ∞Í∞Ä Î≥ÄÍ≤ΩÎê† Îïå HTML ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (!globeRef.current || clusteredData.length === 0) return;

    // HTML ÎùºÎ≤® ÏóÖÎç∞Ïù¥Ìä∏
    globeRef.current
      .htmlElementsData(clusteredData)
      .htmlLat((d: any) => d.lat)
      .htmlLng((d: any) => d.lng)
      .htmlAltitude(0.01)
      .htmlElement((d: any) => {
        const el = document.createElement('div');

        // ÌÅ¥Îü¨Ïä§ÌÑ∞Ïù∏ Í≤ΩÏö∞ÏôÄ Îã®Ïùº ÏïÑÏù¥ÌÖúÏù∏ Í≤ΩÏö∞ Îã§Î•¥Í≤å ÌëúÏãú
        const isCluster = d.count > 1;
        const displayText = isCluster ? `${d.count}Í∞ú ÎèÑÏãú` : d.name;

        // ÎùºÎ≤® ÌÅ¨Í∏∞ Í≥†Ï†ï (zoomÏóê ÏòÅÌñ•Î∞õÏßÄ ÏïäÏùå)
        const fontSize = 13;
        const flagSize = 16;
        const padding = 8;

        el.innerHTML = `
          <div style="
            background: ${
              isCluster
                ? 'rgba(74, 144, 226, 0.95)'
                : 'rgba(255, 255, 255, 0.95)'
            };
            color: ${isCluster ? 'white' : '#333'};
            padding: ${padding}px ${padding * 1.5}px;
            border-radius: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            font-size: ${fontSize}px;
            font-weight: 500;
            white-space: nowrap;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            border: 1px solid rgba(0, 0, 0, 0.1);
            cursor: pointer;
            user-select: none;
            display: flex;
            align-items: center;
            gap: 6px;
            backdrop-filter: blur(10px);
            transition: all 0.2s ease;
            min-width: ${isCluster ? '60px' : 'auto'};
            justify-content: center;
          ">
            ${
              isCluster
                ? `<span style="font-size: ${flagSize}px;">üåç</span>`
                : `<span style="font-size: ${flagSize}px;">${d.flag}</span>`
            }
            <span>${displayText}</span>
          </div>
        `;

        el.style.pointerEvents = 'auto';
        el.style.cursor = 'pointer';
        el.style.position = 'relative';
        el.style.zIndex = '1000';

        // Ìò∏Î≤Ñ Ìö®Í≥º
        const labelDiv = el.querySelector('div') as HTMLElement;
        el.addEventListener('mouseenter', () => {
          if (labelDiv) {
            labelDiv.style.transform = 'scale(1.05)';
            labelDiv.style.background = isCluster
              ? 'rgba(74, 144, 226, 1)'
              : 'rgba(255, 255, 255, 1)';
            labelDiv.style.boxShadow = '0 6px 20px rgba(0, 0, 0, 0.3)';
            labelDiv.style.zIndex = '1001';
          }
        });

        el.addEventListener('mouseleave', () => {
          if (labelDiv) {
            labelDiv.style.transform = 'scale(1)';
            labelDiv.style.background = isCluster
              ? 'rgba(74, 144, 226, 0.95)'
              : 'rgba(255, 255, 255, 0.95)';
            labelDiv.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
            labelDiv.style.zIndex = '1000';
          }
        });

        el.addEventListener('click', (event) => {
          event.preventDefault();
          event.stopPropagation();

          if (isCluster) {
            // ÌÅ¥Îü¨Ïä§ÌÑ∞ ÌÅ¥Î¶≠ Ïãú Ï†ÅÏ†àÌïú Î†àÎ≤®Î°ú Ï§åÏù∏
            const targetAltitude = Math.max(0.8, zoomLevel * 0.4);
            if (globeRef.current) {
              globeRef.current.pointOfView(
                {
                  lat: d.lat,
                  lng: d.lng,
                  altitude: targetAltitude,
                },
                1000
              );
            }
          } else {
            // Îã®Ïùº ÏïÑÏù¥ÌÖú ÌÅ¥Î¶≠ Ïãú ÏÑ†ÌÉù
            setSelectedCountry(d.id);
            if (globeRef.current) {
              globeRef.current.pointOfView(
                {
                  lat: d.lat,
                  lng: d.lng,
                  altitude: 1.2,
                },
                1000
              );
            }
          }
        });

        return el;
      });
  }, [clusteredData, selectedCountry]); // clusteredDataÏôÄ selectedCountryÎßå ÏùòÏ°¥ÏÑ±ÏúºÎ°ú ÏÇ¨Ïö©

  return (
    <div
      style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #0c0c1e 0%, #1a1a2e 100%)',
        color: 'white',
        fontFamily:
          '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '20px',
      }}
    >
      {/* Ìó§Îçî */}
      <div style={{ textAlign: 'center', marginBottom: '40px' }}>
        <h1
          style={{
            fontSize: '28px',
            fontWeight: 'bold',
            marginBottom: '8px',
            color: 'white',
          }}
        >
          {currentPattern.title}
        </h1>
        <p
          style={{
            fontSize: '18px',
            color: '#4a90e2',
            margin: 0,
            marginBottom: '20px',
          }}
        >
          {currentPattern.subtitle}
        </p>

        {/* Í∏ÄÎ°úÎ∏å ÏÑ†ÌÉù Î≤ÑÌäºÎì§ */}
        <div
          style={{
            display: 'flex',
            gap: '10px',
            justifyContent: 'center',
            flexWrap: 'wrap',
          }}
        >
          {travelPatterns.map((pattern, index) => (
            <button
              key={index}
              onClick={() => {
                setCurrentGlobeIndex(index);
                setSelectedCountry(null);
              }}
              style={{
                backgroundColor:
                  currentGlobeIndex === index
                    ? '#4a90e2'
                    : 'rgba(255,255,255,0.1)',
                color: 'white',
                border: '1px solid rgba(255,255,255,0.2)',
                borderRadius: '20px',
                padding: '8px 16px',
                cursor: 'pointer',
                fontSize: '12px',
                fontWeight: '500',
                transition: 'all 0.2s ease',
                backdropFilter: 'blur(10px)',
              }}
            >
              Ìå®ÌÑ¥ {index + 1}
            </button>
          ))}
        </div>
      </div>

      {/* Globe.gl Ïª®ÌÖåÏù¥ÎÑà */}
      <div
        ref={globeEl}
        style={{
          marginBottom: '40px',
          borderRadius: '50%',
          overflow: 'hidden',
          boxShadow: '0 20px 60px rgba(0,0,0,0.5)',
        }}
      />

      {/* Î°úÎî© Î∞è ÏóêÎü¨ ÏÉÅÌÉú ÌëúÏãú */}
      {globeLoading && (
        <div style={{ color: '#4a90e2', marginBottom: '20px' }}>
          üåç Globe.gl Î°úÎî© Ï§ë...
        </div>
      )}

      {globeError && (
        <div
          style={{
            color: '#ff5722',
            marginBottom: '20px',
            textAlign: 'center',
          }}
        >
          ‚ö†Ô∏è {globeError}
        </div>
      )}

      {/* ÌÅ¥Îü¨Ïä§ÌÑ∞ÎßÅ Ï†ïÎ≥¥ */}
      {clusteredData.length > 0 && zoomLevel <= 10 && (
        <div
          style={{
            color: '#8892b0',
            fontSize: '12px',
            marginBottom: '20px',
            textAlign: 'center',
          }}
        >
          ÌòÑÏû¨ Ï§å Î†àÎ≤®: {zoomLevel.toFixed(2)} | ÌÅ¥Îü¨Ïä§ÌÑ∞ Í±∞Î¶¨:{' '}
          {getClusterDistance(zoomLevel)} | ÌÅ¥Îü¨Ïä§ÌÑ∞: {clusteredData.length}Í∞ú
        </div>
      )}

      {/* ÏÑ†ÌÉùÎêú Íµ≠Í∞Ä Ï†ïÎ≥¥ */}
      {selectedCountry && (
        <div
          style={{
            backgroundColor: 'rgba(255,255,255,0.1)',
            backdropFilter: 'blur(10px)',
            borderRadius: '15px',
            padding: '20px',
            textAlign: 'center',
            border: '1px solid rgba(255,255,255,0.2)',
          }}
        >
          {(() => {
            const country = currentPattern.countries.find(
              (c: any) => c.id === selectedCountry
            );
            return country ? (
              <>
                <div style={{ fontSize: '30px', marginBottom: '10px' }}>
                  {country.flag}
                </div>
                <h3 style={{ margin: '0 0 5px 0', color: 'white' }}>
                  {country.name}
                </h3>
                <button
                  onClick={() => setSelectedCountry(null)}
                  style={{
                    backgroundColor: country.color,
                    color: 'white',
                    border: 'none',
                    borderRadius: '20px',
                    padding: '8px 20px',
                    cursor: 'pointer',
                    marginTop: '10px',
                  }}
                >
                  Îã´Í∏∞
                </button>
              </>
            ) : null;
          })()}
        </div>
      )}

      {/* ÏïàÎÇ¥ Î©îÏãúÏßÄ */}
      <p
        style={{
          color: '#8892b0',
          fontSize: '12px',
          textAlign: 'center',
          marginTop: '20px',
        }}
      >
        ÏúÑ Î≤ÑÌäºÏúºÎ°ú Îã§Î•∏ Ïó¨Ìñâ Ìå®ÌÑ¥ÏùÑ ÌôïÏù∏ÌïòÍ≥†, ÏßÄÍµ¨Î≥∏ÏùÑ ÌôïÎåÄ/Ï∂ïÏÜåÌïòÎ©∞ ÌÅ¥Îü¨Ïä§ÌÑ∞Î•º
        ÌÅ¥Î¶≠Ìï¥Î≥¥ÏÑ∏Ïöî
      </p>
    </div>
  );
};

export default GlobePrototype;
